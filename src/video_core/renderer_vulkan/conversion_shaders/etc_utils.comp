//? #version 450
#define tile_size uvec3(4, 4, 1)
#include "utils.comp"
#extension GL_EXT_control_flow_attributes : enable

struct SubTile {
    uint16_t table_subindexes;
    uint16_t negation_flags;
    uint8_t misc;
    uint8_t b;
    uint8_t g;
    uint8_t r;
};

const ivec2 etc1_modifiers[8] = {
    ivec2(2, 8),
    ivec2(5, 17),
    ivec2(9, 29),
    ivec2(13, 42),
    ivec2(18, 60),
    ivec2(24, 80),
    ivec2(33, 106),
    ivec2(47, 183),
};

u8vec3 SampleFromSubTile(SubTile subtile, u8vec2 coords) {
    bool flip = bitfieldExtract(subtile.misc, 0, 1) != 0;
    if (flip) {
        coords = coords.yx;
    }

    ivec3 color = u8vec3(0);
    u8vec3 base = u8vec3(subtile.r, subtile.g, subtile.b);

//    bool differential_mode = bitfieldExtract(subtile.misc, 1, 1) != 0;
//    [[branch]] if (differential_mode) {
//        color = base & uint8_t(0xF8);
//        [[flatten]] if (coords.x >= 2) {
//             color += (base & uint8_t(0x07)) << 3;
//        }
//        color |= color >> 5;
//    } else {
//        [[flatten]] if (coords.x < 2) {
//            color = base & uint8_t(0xF0);
//            color |= color >> 4;
//        } else {
//            color = base & uint8_t(0x0F);
//            color |= color << 4;
//        }
//    }
//
//    int table_index_index = coords.x < 2 ? 6 : 2;
//    uint table_index = bitfieldExtract(subtile.misc, table_index_index, 3);
//    uint vec_select = bitfieldExtract(subtile.table_subindexes, int(gl_LocalInvocationID.x * 4 + gl_LocalInvocationID.y), 1);
//    int modifier = etc1_modifiers[uint(table_index)][vec_select];
//    bool negate = bitfieldExtract(subtile.table_subindexes, int(gl_LocalInvocationIndex), 1) != 0;
//    [[flatten]] if (negate) {
//        modifier = -modifier;
//    }
//    return u8vec3(clamp(color + modifier, 0, 0xFF));
return base;
}

uint32_t ETCSubtileIndex() {
   uvec2 full_tile_coord = gl_WorkGroupID.xy / 2;
   uint32_t index = ((full_tile_coord.y) * stride + (full_tile_coord.x) * 8);
   index = (index / 2) & 0xFFFFFFFCu;
   index |= ((gl_WorkGroupID.y & 0x1u) << 1) | (gl_WorkGroupID.x & 0x1u);
   return index;
}
